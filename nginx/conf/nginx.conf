# Source: https://github.com/zmartzone/lua-resty-openidc?tab=readme-ov-file#sample-configuration-for-google-signin
events {
  worker_connections 128;
}

http {

  lua_package_path '~/lua/?.lua;;';

  resolver 8.8.8.8;

  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 5;

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;
  # cache for JWKs
  lua_shared_dict jwks 1m;

  # NB: if you have "lua_code_cache off;", use:
  # set $session_secret xxxxxxxxxxxxxxxxxxx;
  # see: https://github.com/bungle/lua-resty-session#notes-about-turning-lua-code-cache-off

  server {
    listen 80;

    set_by_lua $redirect_uri 'return os.getenv("OID_REDIRECT_URI")';
    set_by_lua $discovery 'return os.getenv("OID_DISCOVERY")';
    set_by_lua $client_id 'return os.getenv("OID_CLIENT_ID")';
    set_by_lua $client_secret 'return os.getenv("OID_CLIENT_SECRET")';

    location / {

      access_by_lua_block {

          local opts = {
             redirect_uri = $redirect_uri,
             discovery = $discovery,
             client_id = $client_id,
             client_secret = $client_secret,
          }

          -- call authenticate for OpenID Connect user authentication
          local res, err = require("resty.openidc").authenticate(opts)

          if err then
            ngx.status = 500
            ngx.say(err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          -- at this point res is a Lua table with 3 keys:
          --   id_token    : a Lua table with the claims from the id_token (required)
          --   access_token: the access token (optional)
          --   user        : a Lua table with the claims returned from the user info endpoint (optional)

          --if res.id_token.hd ~= "zmartzone.eu" then
          --  ngx.exit(ngx.HTTP_FORBIDDEN)
          --end

          --if res.user.email ~= "hans.zandbelt@zmartzone.eu" then
          --  ngx.exit(ngx.HTTP_FORBIDDEN)
          --end

          -- set headers with user info: this will overwrite any existing headers
          -- but also scrub(!) them in case no value is provided in the token
          ngx.req.set_header("X-USER", res.id_token.sub)
      }

      proxy_pass http://localhost:8080;
      #TODO:
      #proxy_pass $proxy_protocol://$proxy_host:$proxy_port;
    }
  }
}
